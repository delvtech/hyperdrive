// SPDX-License-Identifier: Apache-2.0
pragma solidity 0.8.20;

import { ERC20 } from "openzeppelin/token/ERC20/ERC20.sol";
import { SafeERC20 } from "openzeppelin/token/ERC20/utils/SafeERC20.sol";
import { HyperdriveTarget0 } from "../../external/HyperdriveTarget0.sol";
import { IERC20 } from "../../interfaces/IERC20.sol";
import { I{{ name.capitalized }} } from "../../interfaces/I{{ name.capitalized }}.sol";
import { IHyperdrive } from "../../interfaces/IHyperdrive.sol";
import { {{ name.capitalized }}Base } from "./{{ name.capitalized }}Base.sol";

/// @author DELV
/// @title {{ name.capitalized }}Target0
/// @notice {{ name.capitalized }}Hyperdrive's target0 logic contract. This contract contains
///         all of the getters for Hyperdrive as well as some stateful
///         functions.
/// @custom:disclaimer The language used in this code is for coding convenience
///                    only, and is not intended to, and does not, have any
///                    particular legal or regulatory significance.
contract {{ name.capitalized }}Target0 is HyperdriveTarget0, {{ name.capitalized }}Base {
    using SafeERC20 for ERC20;

    /// @notice Initializes the target0 contract.
    /// @param _config The configuration of the Hyperdrive pool.
    /// @param __vault The {{ name.capitalized }} compatible vault.
    constructor(
        IHyperdrive.PoolConfig memory _config,
        I{{ name.capitalized }} __vault
    ) HyperdriveTarget0(_config) {{ name.capitalized }}Base(__vault) {}

    /// Getters ///

    /// @notice Gets the {{ name.capitalized }} compatible vault used as this pool's yield
    ///         source.
    /// @return The {{ name.capitalized }} compatible yield source.
    function vault() external view returns (I{{ name.capitalized }}) {
        _revert(abi.encode(_vault));
    }
}
