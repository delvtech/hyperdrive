--- ../contracts/src/instances/AaveHyperdrive.sol	2023-05-07 18:33:18.469101129 +0300
+++ 	2023-05-10 13:39:01.862652382 +0300
@@ -2,13 +2,14 @@
 pragma solidity ^0.8.18;
 
 import { IPool } from "@aave/interfaces/IPool.sol";
-import { Hyperdrive } from "../Hyperdrive.sol";
-import { FixedPointMath } from "../libraries/FixedPointMath.sol";
-import { Errors } from "../libraries/Errors.sol";
+import { Hyperdrive } from "../../contracts/src/Hyperdrive.sol";
+import { FixedPointMath } from "../../contracts/src/libraries/FixedPointMath.sol";
+import { Errors } from "../../contracts/src/libraries/Errors.sol";
 import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
-import { IHyperdrive } from "../interfaces/IHyperdrive.sol";
+import { IHyperdrive } from "../../contracts/src/interfaces/IHyperdrive.sol";
+import { HyperdriveStorageGetters } from "../helpers/HyperdriveStorageGetters.sol";
 
-contract AaveHyperdrive is Hyperdrive {
+contract AaveHyperdrive is Hyperdrive, HyperdriveStorageGetters {
     using FixedPointMath for uint256;
 
     // The aave deployment details, the a token for this asset and the aave pool
--- ../contracts/src/ForwarderFactory.sol	2023-05-07 18:33:18.425767793 +0300
+++ 	2023-05-07 18:34:14.477438459 +0300
@@ -1,9 +1,9 @@
 // SPDX-License-Identifier: Apache-2.0
 pragma solidity ^0.8.18;
 
-import { IForwarderFactory } from "./interfaces/IForwarderFactory.sol";
-import { IMultiToken } from "./interfaces/IMultiToken.sol";
-import { ERC20Forwarder } from "./ERC20Forwarder.sol";
+import { IForwarderFactory } from "../../contracts/src/interfaces/IForwarderFactory.sol";
+import { IMultiToken } from "../../contracts/src/interfaces/IMultiToken.sol";
+import { ERC20Forwarder } from "../../contracts/src/ERC20Forwarder.sol";
 
 contract ForwarderFactory is IForwarderFactory {
     // Our multi token contract stores many internal ERC20 like tokens, in order
@@ -17,10 +17,11 @@
     uint256 private _tokenId = 1;
 
     // For reference
-    bytes32 public constant ERC20LINK_HASH =
-        keccak256(type(ERC20Forwarder).creationCode);
+    bytes32 public immutable ERC20LINK_HASH;
 
-    constructor() {} // solhint-disable-line no-empty-blocks
+    constructor() {
+        ERC20LINK_HASH = keccak256(type(ERC20Forwarder).creationCode);
+    } // solhint-disable-line no-empty-blocks
 
     /// @notice Uses create2 to deploy a forwarder at a predictable address as part of
     ///         our ERC20 multitoken implementation.
@@ -38,16 +39,18 @@
         // The salt is the _tokenId hashed with the multi token
         bytes32 salt = keccak256(abi.encode(token, tokenId));
         // Deploy using create2 with that salt
-        ERC20Forwarder deployed = new ERC20Forwarder{ salt: salt }();
+        // ERC20Forwarder deployed = new ERC20Forwarder{ salt: salt }();
         // As a consistency check we check that this is in the right address
-        assert(address(deployed) == getForwarder(token, tokenId));
+        assert(address(tmp) == getForwarder(token, tokenId));
         // Reset the transient state
         _token = IMultiToken(address(1));
         _tokenId = 1;
         // return the deployed forwarder
-        return (deployed);
+        return (tmp);
     }
 
+    ERC20Forwarder tmp;
+
     /// @notice Returns the transient storage of this contract
     /// @return Returns the stored multitoken address and the sub token id
     function getDeployDetails() external view returns (IMultiToken, uint256) {
