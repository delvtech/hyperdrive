--- ../contracts/src/instances/AaveHyperdrive.sol	2023-05-18 15:40:39.353490028 +0300
+++ 	2023-05-25 10:33:35.378655549 +0300
@@ -2,11 +2,11 @@
 pragma solidity ^0.8.18;
 
 import { IPool } from "@aave/interfaces/IPool.sol";
-import { Hyperdrive } from "../Hyperdrive.sol";
-import { FixedPointMath } from "../libraries/FixedPointMath.sol";
-import { Errors } from "../libraries/Errors.sol";
+import { Hyperdrive } from "./Hyperdrive.sol";
+import { FixedPointMath } from "../../contracts/src/libraries/FixedPointMath.sol";
+import { Errors } from "../../contracts/src/libraries/Errors.sol";
 import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
-import { IHyperdrive } from "../interfaces/IHyperdrive.sol";
+import { IHyperdrive } from "../../contracts/src/interfaces/IHyperdrive.sol";
 
 contract AaveHyperdrive is Hyperdrive {
     using FixedPointMath for uint256;
@@ -16,7 +16,7 @@
     IPool internal immutable pool;
 
     // The shares created by this pool, starts at one to one with deposits and increases
-    uint256 internal totalShares;
+    uint256 public totalShares;
 
     /// @notice Initializes a Hyperdrive pool.
     /// @param _config The configuration of the Hyperdrive pool.
@@ -42,7 +42,8 @@
 
         aToken = _aToken;
         pool = _pool;
-        _config.baseToken.approve(address(pool), type(uint256).max);
+        IERC20 base = _config.baseToken;
+        base.approve(address(pool), type(uint256).max);
     }
 
     ///@notice Transfers amount of 'token' from the user and commits it to the yield source.
--- ../contracts/src/Hyperdrive.sol	2023-05-23 12:54:47.203907940 +0300
+++ 	2023-05-25 10:33:35.378655549 +0300
@@ -3,14 +3,16 @@
 
 import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
 import { SafeCast } from "@openzeppelin/contracts/utils/math/SafeCast.sol";
-import { HyperdriveBase } from "./HyperdriveBase.sol";
+import { HyperdriveBase } from "../../contracts/src/HyperdriveBase.sol";
 import { HyperdriveLong } from "./HyperdriveLong.sol";
 import { HyperdriveShort } from "./HyperdriveShort.sol";
-import { AssetId } from "./libraries/AssetId.sol";
-import { Errors } from "./libraries/Errors.sol";
-import { FixedPointMath } from "./libraries/FixedPointMath.sol";
-import { HyperdriveMath } from "./libraries/HyperdriveMath.sol";
-import { IHyperdrive } from "./interfaces/IHyperdrive.sol";
+import { AssetId } from "../../contracts/src/libraries/AssetId.sol";
+import { Errors } from "../../contracts/src/libraries/Errors.sol";
+import { FixedPointMath } from "../../contracts/src/libraries/FixedPointMath.sol";
+import { HyperdriveMath } from "../../contracts/src/libraries/HyperdriveMath.sol";
+import { IHyperdrive } from "../../contracts/src/interfaces/IHyperdrive.sol";
+import { HyperdriveStorageGetters} from "../helpers/HyperdriveStorageGetters.sol";
+import { IHyperdriveTypes } from "../helpers/IHyperdriveTypes.sol";
 
 /// @author DELV
 /// @title Hyperdrive
@@ -21,7 +23,9 @@
 abstract contract Hyperdrive is
     HyperdriveBase,
     HyperdriveLong,
-    HyperdriveShort
+    HyperdriveShort,
+    HyperdriveStorageGetters,
+    IHyperdriveTypes
 {
     using FixedPointMath for uint256;
     using SafeCast for uint256;
--- ../contracts/src/HyperdriveLP.sol	2023-05-25 10:32:01.878722396 +0300
+++ 	2023-05-25 10:33:35.378655549 +0300
@@ -2,12 +2,13 @@
 pragma solidity ^0.8.18;
 
 import { SafeCast } from "@openzeppelin/contracts/utils/math/SafeCast.sol";
-import { HyperdriveBase } from "./HyperdriveBase.sol";
-import { AssetId } from "./libraries/AssetId.sol";
-import { Errors } from "./libraries/Errors.sol";
-import { FixedPointMath } from "./libraries/FixedPointMath.sol";
-import { HyperdriveMath } from "./libraries/HyperdriveMath.sol";
-import { HyperdriveTWAP } from "./HyperdriveTWAP.sol";
+import { HyperdriveBase } from "../../contracts/src/HyperdriveBase.sol";
+import { AssetId } from "../../contracts/src/libraries/AssetId.sol";
+import { Errors } from "../../contracts/src/libraries/Errors.sol";
+import { FixedPointMath } from "../../contracts/src/libraries/FixedPointMath.sol";
+import { HyperdriveMath } from "../../contracts/src/libraries/HyperdriveMath.sol";
+import { HyperdriveTWAP } from "../../contracts/src/HyperdriveTWAP.sol";
+import { HyperdriveMathMock } from "../helpers/HyperdriveMathMock.sol";
 
 /// @author DELV
 /// @title HyperdriveLP
@@ -148,7 +149,7 @@
                     ),
                     shortBaseVolume: _marketState.shortBaseVolume
                 });
-            uint256 startingPresentValue = HyperdriveMath.calculatePresentValue(
+            uint256 startingPresentValue = HyperdriveMathMock.calculatePresentValue(
                 params
             );
 
@@ -157,7 +158,7 @@
             _updateLiquidity(int256(shares));
             params.shareReserves = _marketState.shareReserves;
             params.bondReserves = _marketState.bondReserves;
-            endingPresentValue = HyperdriveMath.calculatePresentValue(params);
+            endingPresentValue = HyperdriveMathMock.calculatePresentValue(params);
 
             // The LP shares minted to the LP is derived by solving for the
             // change in LP shares that preserves the ratio of present value to
@@ -397,7 +398,7 @@
                 ),
                 shortBaseVolume: _marketState.shortBaseVolume
             });
-        uint256 startingPresentValue = HyperdriveMath.calculatePresentValue(
+        uint256 startingPresentValue = HyperdriveMathMock.calculatePresentValue(
             params
         );
 
@@ -418,7 +419,7 @@
         _updateLiquidity(-int256(shareProceeds));
         params.shareReserves = _marketState.shareReserves;
         params.bondReserves = _marketState.bondReserves;
-        uint256 endingPresentValue = HyperdriveMath.calculatePresentValue(
+        uint256 endingPresentValue = HyperdriveMathMock.calculatePresentValue(
             params
         );
 
@@ -459,7 +460,7 @@
         uint256 _withdrawalSharesOutstanding,
         uint256 _sharePrice
     ) internal {
-        uint256 presentValue = HyperdriveMath.calculatePresentValue(
+        uint256 presentValue = HyperdriveMathMock.calculatePresentValue(
             HyperdriveMath.PresentValueParams({
                 shareReserves: _marketState.shareReserves,
                 bondReserves: _marketState.bondReserves,
--- ../contracts/src/HyperdriveShort.sol	2023-05-25 10:32:01.888722402 +0300
+++ 	2023-05-25 11:06:09.097895605 +0300
@@ -3,11 +3,12 @@
 
 import { SafeCast } from "@openzeppelin/contracts/utils/math/SafeCast.sol";
 import { HyperdriveLP } from "./HyperdriveLP.sol";
-import { AssetId } from "./libraries/AssetId.sol";
-import { Errors } from "./libraries/Errors.sol";
-import { FixedPointMath } from "./libraries/FixedPointMath.sol";
-import { HyperdriveMath } from "./libraries/HyperdriveMath.sol";
-import { YieldSpaceMath } from "./libraries/YieldSpaceMath.sol";
+import { AssetId } from "../../contracts/src/libraries/AssetId.sol";
+import { Errors } from "../../contracts/src/libraries/Errors.sol";
+import { FixedPointMath } from "../../contracts/src/libraries/FixedPointMath.sol";
+import { HyperdriveMath } from "../../contracts/src/libraries/HyperdriveMath.sol";
+import { YieldSpaceMath } from "../../contracts/src/libraries/YieldSpaceMath.sol";
+import { HyperdriveFeeMath } from "../helpers/HyperdriveFeeMath.sol";
 
 /// @author DELV
 /// @title HyperdriveShort
@@ -15,7 +16,7 @@
 /// @custom:disclaimer The language used in this code is for coding convenience
 ///                    only, and is not intended to, and does not, have any
 ///                    particular legal or regulatory significance.
-abstract contract HyperdriveShort is HyperdriveLP {
+abstract contract HyperdriveShort is HyperdriveLP, HyperdriveFeeMath {
     using FixedPointMath for uint256;
     using SafeCast for uint256;
 
@@ -381,6 +382,15 @@
         // Add the spot price to the oracle if an oracle update is required
         recordPrice(spotPrice);
 
+        HDFee memory fee = MockCalculateFeesOutGivenBondsIn(_bondAmount, _timeRemaining, spotPrice, _sharePrice);
+        (
+            uint256 totalCurveFee,
+            ,
+            uint256 governanceCurveFee,
+            uint256 governanceFlatFee
+        ) = destructHDFee(fee);
+        totalGovernanceFee = governanceCurveFee + governanceFlatFee;
+        /*
         uint256 totalCurveFee;
         (
             totalCurveFee, // there is no flat fee on opening shorts
@@ -392,6 +402,7 @@
             spotPrice,
             _sharePrice
         );
+        */
         shareReservesDelta -= totalCurveFee;
         return (shareReservesDelta, totalGovernanceFee);
     }
@@ -450,7 +461,14 @@
 
         // Record an oracle update
         recordPrice(spotPrice);
-
+        HDFee memory fee = MockCalculateFeesInGivenBondsOut(_bondAmount, timeRemaining, spotPrice, _sharePrice);
+        (
+            uint256 totalCurveFee,
+            uint256 totalFlatFee,
+            uint256 governanceCurveFee,
+            uint256 governanceFlatFee
+        ) = destructHDFee(fee);
+        /*
         (
             uint256 totalCurveFee,
             uint256 totalFlatFee,
@@ -462,6 +480,7 @@
                 spotPrice,
                 _sharePrice
             );
+        */
         shareReservesDelta += totalCurveFee - governanceCurveFee;
         sharePayment += totalCurveFee + totalFlatFee;
 
--- ../contracts/src/HyperdriveLong.sol	2023-05-25 10:32:01.878722396 +0300
+++ 	2023-05-25 10:55:06.738151070 +0300
@@ -3,10 +3,11 @@
 
 import { SafeCast } from "@openzeppelin/contracts/utils/math/SafeCast.sol";
 import { HyperdriveLP } from "./HyperdriveLP.sol";
-import { AssetId } from "./libraries/AssetId.sol";
-import { Errors } from "./libraries/Errors.sol";
-import { FixedPointMath } from "./libraries/FixedPointMath.sol";
-import { HyperdriveMath } from "./libraries/HyperdriveMath.sol";
+import { AssetId } from "../../contracts/src/libraries/AssetId.sol";
+import { Errors } from "../../contracts/src/libraries/Errors.sol";
+import { FixedPointMath } from "../../contracts/src/libraries/FixedPointMath.sol";
+import { HyperdriveMath } from "../../contracts/src/libraries/HyperdriveMath.sol";
+import { HyperdriveFeeMath } from "../helpers/HyperdriveFeeMath.sol";
 
 /// @author DELV
 /// @title HyperdriveLong
@@ -14,7 +15,7 @@
 /// @custom:disclaimer The language used in this code is for coding convenience
 ///                    only, and is not intended to, and does not, have any
 ///                    particular legal or regulatory significance.
-abstract contract HyperdriveLong is HyperdriveLP {
+abstract contract HyperdriveLong is HyperdriveLP, HyperdriveFeeMath {
     using FixedPointMath for uint256;
     using SafeCast for uint256;
 
@@ -371,7 +372,14 @@
 
         // Record an oracle update
         recordPrice(spotPrice);
+        HDFee memory fee = MockCalculateFeesOutGivenSharesIn(_shareAmount, bondProceeds, spotPrice, _sharePrice);
+        (
+             uint256 totalCurveFee,
+            ,
+             uint256 governanceCurveFee,
 
+        ) = destructHDFee(fee);
+        /*
         (
             uint256 totalCurveFee,
             uint256 governanceCurveFee
@@ -381,6 +389,7 @@
                 spotPrice,
                 _sharePrice
             );
+        */
         bondProceeds = bondReservesDelta - totalCurveFee;
         bondReservesDelta -= totalCurveFee - governanceCurveFee;
 
@@ -458,9 +467,12 @@
         // Record an oracle update
         recordPrice(spotPrice);
 
+        HDFee memory fee = MockCalculateFeesOutGivenBondsIn(_bondAmount, timeRemaining, spotPrice, _sharePrice);
         uint256 totalCurveFee;
         uint256 totalFlatFee;
-        (
+        (totalCurveFee, totalFlatFee, ,) = destructHDFee(fee);
+        totalGovernanceFee = totalCurveFee.add(totalFlatFee).mulDown(_governanceFee);
+        /*(
             totalCurveFee,
             totalFlatFee,
             totalGovernanceFee
@@ -469,7 +481,7 @@
             timeRemaining,
             spotPrice,
             _sharePrice
-        );
+        );*/
         shareReservesDelta -= totalCurveFee;
         shareProceeds -= totalCurveFee + totalFlatFee;
 
--- ../contracts/src/ForwarderFactory.sol	2023-05-07 18:33:18.425767793 +0300
+++ 	2023-05-25 10:33:35.378655549 +0300
@@ -1,9 +1,9 @@
 // SPDX-License-Identifier: Apache-2.0
 pragma solidity ^0.8.18;
 
-import { IForwarderFactory } from "./interfaces/IForwarderFactory.sol";
-import { IMultiToken } from "./interfaces/IMultiToken.sol";
-import { ERC20Forwarder } from "./ERC20Forwarder.sol";
+import { IForwarderFactory } from "../../contracts/src/interfaces/IForwarderFactory.sol";
+import { IMultiToken } from "../../contracts/src/interfaces/IMultiToken.sol";
+import { ERC20Forwarder } from "../../contracts/src/ERC20Forwarder.sol";
 
 contract ForwarderFactory is IForwarderFactory {
     // Our multi token contract stores many internal ERC20 like tokens, in order
@@ -17,10 +17,11 @@
     uint256 private _tokenId = 1;
 
     // For reference
-    bytes32 public constant ERC20LINK_HASH =
-        keccak256(type(ERC20Forwarder).creationCode);
+    bytes32 public immutable ERC20LINK_HASH;
 
-    constructor() {} // solhint-disable-line no-empty-blocks
+    constructor() {
+        ERC20LINK_HASH = keccak256(type(ERC20Forwarder).creationCode);
+    } // solhint-disable-line no-empty-blocks
 
     /// @notice Uses create2 to deploy a forwarder at a predictable address as part of
     ///         our ERC20 multitoken implementation.
@@ -38,16 +39,18 @@
         // The salt is the _tokenId hashed with the multi token
         bytes32 salt = keccak256(abi.encode(token, tokenId));
         // Deploy using create2 with that salt
-        ERC20Forwarder deployed = new ERC20Forwarder{ salt: salt }();
+        // ERC20Forwarder deployed = new ERC20Forwarder{ salt: salt }();
         // As a consistency check we check that this is in the right address
-        assert(address(deployed) == getForwarder(token, tokenId));
+        assert(address(tmp) == getForwarder(token, tokenId));
         // Reset the transient state
         _token = IMultiToken(address(1));
         _tokenId = 1;
         // return the deployed forwarder
-        return (deployed);
+        return (tmp);
     }
 
+    ERC20Forwarder tmp;
+
     /// @notice Returns the transient storage of this contract
     /// @return Returns the stored multitoken address and the sub token id
     function getDeployDetails() external view returns (IMultiToken, uint256) {
