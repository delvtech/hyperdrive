--- ../contracts/src/instances/AaveHyperdrive.sol	2023-05-14 11:34:49.197106287 +0300
+++ 	2023-05-14 11:39:15.877024691 +0300
@@ -2,11 +2,11 @@
 pragma solidity ^0.8.18;
 
 import { IPool } from "@aave/interfaces/IPool.sol";
-import { Hyperdrive } from "../Hyperdrive.sol";
-import { FixedPointMath } from "../libraries/FixedPointMath.sol";
-import { Errors } from "../libraries/Errors.sol";
+import { Hyperdrive } from "./Hyperdrive.sol";
+import { FixedPointMath } from "../../contracts/src/libraries/FixedPointMath.sol";
+import { Errors } from "../../contracts/src/libraries/Errors.sol";
 import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
-import { IHyperdrive } from "../interfaces/IHyperdrive.sol";
+import { IHyperdrive } from "../../contracts/src/interfaces/IHyperdrive.sol";
 
 contract AaveHyperdrive is Hyperdrive {
     using FixedPointMath for uint256;
@@ -16,7 +16,7 @@
     IPool internal immutable pool;
 
     // The shares created by this pool, starts at one to one with deposits and increases
-    uint256 internal totalShares;
+    uint256 public totalShares;
 
     /// @notice Initializes a Hyperdrive pool.
     /// @param _config The configuration of the Hyperdrive pool.
--- ../contracts/src/Hyperdrive.sol	2023-05-07 18:33:18.436601126 +0300
+++ 	2023-05-14 17:20:47.313105469 +0300
@@ -3,14 +3,16 @@
 
 import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";
 import { SafeCast } from "@openzeppelin/contracts/utils/math/SafeCast.sol";
-import { HyperdriveBase } from "./HyperdriveBase.sol";
+import { HyperdriveBase } from "../../contracts/src/HyperdriveBase.sol";
 import { HyperdriveLong } from "./HyperdriveLong.sol";
 import { HyperdriveShort } from "./HyperdriveShort.sol";
-import { AssetId } from "./libraries/AssetId.sol";
-import { Errors } from "./libraries/Errors.sol";
-import { FixedPointMath } from "./libraries/FixedPointMath.sol";
-import { HyperdriveMath } from "./libraries/HyperdriveMath.sol";
-import { IHyperdrive } from "./interfaces/IHyperdrive.sol";
+import { AssetId } from "../../contracts/src/libraries/AssetId.sol";
+import { Errors } from "../../contracts/src/libraries/Errors.sol";
+import { FixedPointMath } from "../../contracts/src/libraries/FixedPointMath.sol";
+import { HyperdriveMath } from "../../contracts/src/libraries/HyperdriveMath.sol";
+import { IHyperdrive } from "../../contracts/src/interfaces/IHyperdrive.sol";
+import { HyperdriveStorageGetters} from "../helpers/HyperdriveStorageGetters.sol";
+import { IHyperdriveTypes } from "../helpers/IHyperdriveTypes.sol";
 
 /// @author DELV
 /// @title Hyperdrive
@@ -21,7 +23,9 @@
 abstract contract Hyperdrive is
     HyperdriveBase,
     HyperdriveLong,
-    HyperdriveShort
+    HyperdriveShort,
+    HyperdriveStorageGetters,
+    IHyperdriveTypes
 {
     using FixedPointMath for uint256;
     using SafeCast for uint256;
--- ../contracts/src/HyperdriveShort.sol	2023-05-11 11:16:52.373635276 +0300
+++ 	2023-05-11 11:23:00.323496707 +0300
@@ -2,12 +2,14 @@
 pragma solidity ^0.8.18;
 
 import { SafeCast } from "@openzeppelin/contracts/utils/math/SafeCast.sol";
-import { HyperdriveLP } from "./HyperdriveLP.sol";
-import { AssetId } from "./libraries/AssetId.sol";
-import { Errors } from "./libraries/Errors.sol";
-import { FixedPointMath } from "./libraries/FixedPointMath.sol";
-import { HyperdriveMath } from "./libraries/HyperdriveMath.sol";
-import { YieldSpaceMath } from "./libraries/YieldSpaceMath.sol";
+import { HyperdriveLP } from "../../contracts/src/HyperdriveLP.sol";
+import { AssetId } from "../../contracts/src/libraries/AssetId.sol";
+import { Errors } from "../../contracts/src/libraries/Errors.sol";
+import { FixedPointMath } from "../../contracts/src/libraries/FixedPointMath.sol";
+import { HyperdriveMath } from "../../contracts/src/libraries/HyperdriveMath.sol";
+import { YieldSpaceMath } from "../../contracts/src/libraries/YieldSpaceMath.sol";
+import { HyperdriveFeeMath } from "../helpers/HyperdriveFeeMath.sol";
+
 
 /// @author DELV
 /// @title HyperdriveShort
@@ -15,7 +17,7 @@
 /// @custom:disclaimer The language used in this code is for coding convenience
 ///                    only, and is not intended to, and does not, have any
 ///                    particular legal or regulatory significance.
-abstract contract HyperdriveShort is HyperdriveLP {
+abstract contract HyperdriveShort is HyperdriveLP, HyperdriveFeeMath {
     using FixedPointMath for uint256;
     using SafeCast for uint256;
 
@@ -396,9 +398,12 @@
         // Add the spot price to the oracle if an oracle update is required
         recordPrice(spotPrice);
 
+        HDFee memory fee = MockCalculateFeesOutGivenBondsIn(_bondAmount, _timeRemaining, spotPrice, _sharePrice);
         uint256 totalCurveFee;
         uint256 totalFlatFee;
-        (
+        (totalCurveFee, totalFlatFee, ,) = destructHDFee(fee);
+        totalGovernanceFee = totalCurveFee.add(totalFlatFee).mulDown(_governanceFee);
+        /*(
             totalCurveFee,
             totalFlatFee,
             totalGovernanceFee
@@ -407,7 +412,7 @@
             _timeRemaining,
             spotPrice,
             _sharePrice
-        );
+        );*/
         shareReservesDelta -= totalCurveFee;
         shareProceeds -= totalCurveFee + totalFlatFee;
 
@@ -476,18 +481,20 @@
 
         // Record an oracle update
         recordPrice(spotPrice);
-
+        /// @dev : Certora mock
+        HDFee memory fee = MockCalculateFeesInGivenBondsOut(_bondAmount, timeRemaining, spotPrice, _sharePrice);
         (
             uint256 totalCurveFee,
             uint256 totalFlatFee,
             uint256 governanceCurveFee,
             uint256 governanceFlatFee
-        ) = _calculateFeesInGivenBondsOut(
+        ) = destructHDFee(fee);/*_calculateFeesInGivenBondsOut(
                 _bondAmount, // amountOut
                 timeRemaining,
                 spotPrice,
                 _sharePrice
-            );
+            );*/
+        
         shareReservesDelta += totalCurveFee - governanceCurveFee;
         sharePayment += totalCurveFee + totalFlatFee;
 
--- ../contracts/src/HyperdriveLong.sol	2023-05-11 11:16:57.893632955 +0300
+++ 	2023-05-11 11:22:56.113498548 +0300
@@ -2,11 +2,13 @@
 pragma solidity ^0.8.18;
 
 import { SafeCast } from "@openzeppelin/contracts/utils/math/SafeCast.sol";
-import { HyperdriveLP } from "./HyperdriveLP.sol";
-import { AssetId } from "./libraries/AssetId.sol";
-import { Errors } from "./libraries/Errors.sol";
-import { FixedPointMath } from "./libraries/FixedPointMath.sol";
-import { HyperdriveMath } from "./libraries/HyperdriveMath.sol";
+import { HyperdriveLP } from "../../contracts/src/HyperdriveLP.sol";
+import { AssetId } from "../../contracts/src/libraries/AssetId.sol";
+import { Errors } from "../../contracts/src/libraries/Errors.sol";
+import { FixedPointMath } from "../../contracts/src/libraries/FixedPointMath.sol";
+import { HyperdriveMath } from "../../contracts/src/libraries/HyperdriveMath.sol";
+import { HyperdriveFeeMath } from "../helpers/HyperdriveFeeMath.sol";
+
 
 /// @author DELV
 /// @title HyperdriveLong
@@ -14,7 +16,7 @@
 /// @custom:disclaimer The language used in this code is for coding convenience
 ///                    only, and is not intended to, and does not, have any
 ///                    particular legal or regulatory significance.
-abstract contract HyperdriveLong is HyperdriveLP {
+abstract contract HyperdriveLong is HyperdriveLP, HyperdriveFeeMath {
     using FixedPointMath for uint256;
     using SafeCast for uint256;
 
@@ -377,18 +379,19 @@
         // Record an oracle update
         recordPrice(spotPrice);
 
+        HDFee memory fee = MockCalculateFeesOutGivenSharesIn(_shareAmount, bondProceeds, _timeRemaining, spotPrice, _sharePrice);            
         (
             uint256 totalCurveFee,
             uint256 totalFlatFee,
             uint256 governanceCurveFee,
             uint256 governanceFlatFee
-        ) = _calculateFeesOutGivenSharesIn(
+        ) = destructHDFee(fee);/*_calculateFeesOutGivenSharesIn(
                 _shareAmount, // amountIn
                 bondProceeds, // amountOut
                 _timeRemaining,
                 spotPrice,
                 _sharePrice
-            );
+            );*/
         bondReservesDelta -= totalCurveFee - governanceCurveFee;
         bondProceeds -= totalCurveFee + totalFlatFee;
 
@@ -469,9 +472,12 @@
         // Record an oracle update
         recordPrice(spotPrice);
 
+        HDFee memory fee = MockCalculateFeesOutGivenBondsIn(_bondAmount, timeRemaining, spotPrice, _sharePrice);
         uint256 totalCurveFee;
         uint256 totalFlatFee;
-        (
+        (totalCurveFee, totalFlatFee, ,) = destructHDFee(fee);
+        totalGovernanceFee = totalCurveFee.add(totalFlatFee).mulDown(_governanceFee);
+        /*(
             totalCurveFee,
             totalFlatFee,
             totalGovernanceFee
@@ -480,7 +486,7 @@
             timeRemaining,
             spotPrice,
             _sharePrice
-        );
+        );*/
         shareReservesDelta -= totalCurveFee;
         shareProceeds -= totalCurveFee + totalFlatFee;
 
--- ../contracts/src/ForwarderFactory.sol	2023-05-07 18:33:18.425767793 +0300
+++ 	2023-05-10 16:38:05.258231605 +0300
@@ -1,9 +1,9 @@
 // SPDX-License-Identifier: Apache-2.0
 pragma solidity ^0.8.18;
 
-import { IForwarderFactory } from "./interfaces/IForwarderFactory.sol";
-import { IMultiToken } from "./interfaces/IMultiToken.sol";
-import { ERC20Forwarder } from "./ERC20Forwarder.sol";
+import { IForwarderFactory } from "../../contracts/src/interfaces/IForwarderFactory.sol";
+import { IMultiToken } from "../../contracts/src/interfaces/IMultiToken.sol";
+import { ERC20Forwarder } from "../../contracts/src/ERC20Forwarder.sol";
 
 contract ForwarderFactory is IForwarderFactory {
     // Our multi token contract stores many internal ERC20 like tokens, in order
@@ -17,10 +17,11 @@
     uint256 private _tokenId = 1;
 
     // For reference
-    bytes32 public constant ERC20LINK_HASH =
-        keccak256(type(ERC20Forwarder).creationCode);
+    bytes32 public immutable ERC20LINK_HASH;
 
-    constructor() {} // solhint-disable-line no-empty-blocks
+    constructor() {
+        ERC20LINK_HASH = keccak256(type(ERC20Forwarder).creationCode);
+    } // solhint-disable-line no-empty-blocks
 
     /// @notice Uses create2 to deploy a forwarder at a predictable address as part of
     ///         our ERC20 multitoken implementation.
@@ -38,16 +39,18 @@
         // The salt is the _tokenId hashed with the multi token
         bytes32 salt = keccak256(abi.encode(token, tokenId));
         // Deploy using create2 with that salt
-        ERC20Forwarder deployed = new ERC20Forwarder{ salt: salt }();
+        // ERC20Forwarder deployed = new ERC20Forwarder{ salt: salt }();
         // As a consistency check we check that this is in the right address
-        assert(address(deployed) == getForwarder(token, tokenId));
+        assert(address(tmp) == getForwarder(token, tokenId));
         // Reset the transient state
         _token = IMultiToken(address(1));
         _tokenId = 1;
         // return the deployed forwarder
-        return (deployed);
+        return (tmp);
     }
 
+    ERC20Forwarder tmp;
+
     /// @notice Returns the transient storage of this contract
     /// @return Returns the stored multitoken address and the sub token id
     function getDeployDetails() external view returns (IMultiToken, uint256) {
