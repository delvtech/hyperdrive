#!/bin/bash

# Treat unset variables and parameters other than
# the special parameters "@" and "*" as an error
# and return a non-zero status.
set -ou

#
#   ___                                       _
#  / _ \                                     | |
# / /_\ \_ __ __ _ _   _ _ __ ___   ___ _ __ | |_ ___
# |  _  | '__/ _` | | | | '_ ` _ \ / _ \ '_ \| __/ __|
# | | | | | | (_| | |_| | | | | | |  __/ | | | |_\__ \
# \_| |_/_|  \__, |\__,_|_| |_| |_|\___|_| |_|\__|___/
#             __/ |
#            |___/
#
# All arguments are required and can be specified
# by either environment variable or positional argument.
#
# NOTE: Must specify all via positionals OR all via args, no mix and matching.
#
# 1. FOUNDRY_PROFILE: Configures foundry, same as used for deployment.
# 2. RPC_URL: URL to access the desired chain's block provider.
# 3. CHAIN_ID: Desired chain for verification.
# 4. ETHERSCAN_API_KEY: Needed for verification.
#     - View here: https://etherscan.io/myapikey
# 5. POOL_CONTRACT: Path and name of target contract
#     - "path/from/repo/root.sol:ContractName"
# 5. POOL_ADDRESS:    Address of the 'Hyperdrive' instance.
#

export FOUNDRY_PROFILE="${1:-FOUNDRY_PROFILE}"
export FOUNDRY_RPC_URL="${2:-$FOUNDRY_RPC_URL}"
export FOUNDRY_CHAIN_ID="${3:-$FOUNDRY_CHAIN_ID}"
ETHERSCAN_API_KEY="${4:-$ETHERSCAN_API_KEY}"
POOL_CONTRACT="${5:-$POOL_CONTRACT}"
POOL_ADDRESS="${6:-$POOL_ADDRESS}"

echo "FOUNDRY_PROFILE=${FOUNDRY_PROFILE}"
echo "FOUNDRY_RPC_URL=${FOUNDRY_RPC_URL}"
echo "FOUNDRY_CHAIN_ID=${FOUNDRY_CHAIN_ID}"
echo "ETHERSCAN_API_KEY=${ETHERSCAN_API_KEY}"
echo "POOL_ADDRESS=${POOL_ADDRESS}"

#
# ______      __            _ _
# |  _  \    / _|          | | |
# | | | |___| |_ __ _ _   _| | |_ ___
# | | | / _ \  _/ _` | | | | | __/ __|
# | |/ /  __/ || (_| | |_| | | |_\__ \
# |___/ \___|_| \__,_|\__,_|_|\__|___/
#
# Variables that shouldn't change run-to-run, modify this script to update them
#

verify_flags=(
	--watch
	--compiler-version
	"v0.8.20+commit.a1b79de6"
	--num-of-optimizations
	10000000
	--evm-version
	paris
)

#
# ______           _   _____              __ _
# | ___ \         | | /  __ \            / _(_)
# | |_/ /__   ___ | | | /  \/ ___  _ __ | |_ _  __ _
# |  __/ _ \ / _ \| | | |    / _ \| '_ \|  _| |/ _` |
# | | | (_) | (_) | | | \__/\ (_) | | | | | | | (_| |
# \_|  \___/ \___/|_|  \____/\___/|_| |_|_| |_|\__, |
#                                               __/ |
#                                              |___/
#
# Obtain the PoolConfig data from the Hyperdrive instance,
# it should remain static after deployment.

# The return type is intentionally left out which allows us to receive raw bytes back.
pool_config_raw=$(cast call ${POOL_ADDRESS} "getPoolConfig()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID})

#
#  _____                    _
# |_   _|                  | |
#   | | __ _ _ __ __ _  ___| |_ ___
#   | |/ _` | '__/ _` |/ _ \ __/ __|
#   | | (_| | | | (_| |  __/ |_\__ \
#   \_/\__,_|_|  \__, |\___|\__|___/
#                 __/ |
#                |___/
#
# Retrieve the Target addresses in bytes32 format from
# the hyperdrive instance and concatenate them.
#

# join_by: Joins elements into a delimited string.
function join_by {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

# The return type of the "target<n>()" functions is intentionally omitted
# to have cast return the address as bytes32.
targets=$(
	join_by ':' \
		$(cast call ${POOL_ADDRESS} "target0()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID}) \
		$(cast call ${POOL_ADDRESS} "target1()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID}) \
		$(cast call ${POOL_ADDRESS} "target2()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID}) \
		$(cast call ${POOL_ADDRESS} "target3()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID}) \
		$(cast call ${POOL_ADDRESS} "target4()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID})
)
# targets=(
#   join_by ',' \
#   $(cast call ${POOL_ADDRESS} "target0()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID} | cast parse-bytes32-address) \
#   $(cast call ${POOL_ADDRESS} "target1()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID} | cast parse-bytes32-address) \
#   $(cast call ${POOL_ADDRESS} "target2()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID} | cast parse-bytes32-address) \
#   $(cast call ${POOL_ADDRESS} "target3()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID} | cast parse-bytes32-address) \
#   $(cast call ${POOL_ADDRESS} "target4()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID} | cast parse-bytes32-address)
# )
# targets=(
#   $(cast call ${POOL_ADDRESS} "target0()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID})
#   $(cast call ${POOL_ADDRESS} "target1()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID})
#   $(cast call ${POOL_ADDRESS} "target2()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID})
#   $(cast call ${POOL_ADDRESS} "target3()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID})
#   $(cast call ${POOL_ADDRESS} "target4()" --rpc-url ${FOUNDRY_RPC_URL} --chain-id ${FOUNDRY_CHAIN_ID})
# )

#
#  _   _           _  __
# | | | |         (_)/ _|
# | | | | ___ _ __ _| |_ _   _
# | | | |/ _ \ '__| |  _| | | |
# \ \_/ /  __/ |  | | | | |_| |
#  \___/ \___|_|  |_|_|  \__, |
#                         __/ |
#                        |___/
#
# Use the previously gathered data to assemble the deployed
# constructor arguments and verify the contract.
#
# Here is the full constructor signature for reference:
#
#   constructor(
#     (address,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,
#       (uint256,uint256,uint256,uint256)
#     ),
#     address
#     address
#     address
#     address
#     address
#   )
#

# Combine all the hex strings into a 'biggun.
constructor_args="$(cast to-hexdata ${pool_config_raw}:${targets})"
# constructor_args=$(
#   ${pool_config_raw}
#   ${targets[*]}
# )

echo ${constructor_args:2}

# NOTE: Remove the "0x" prefix otherwise it won't work.
# constructor_args="${constructor_args:2}"

# Make the call for Etherscan verification and pray.
# echo "forge verify-contract \
# 	${verify_flags[*]} \
# 	--constructor-args "${constructor_args}" \
# 	--chain-id ${FOUNDRY_CHAIN_ID} \
# 	${POOL_ADDRESS} \
# 	${POOL_CONTRACT}"

source_code=`forge verify-contract --show-standard-json-input --constructor-args "${constructor_args:2}" --rpc-url="${FOUNDRY_RPC_URL}" --compiler-version "v0.8.20+commit.a1b79de6" --num-of-optimizations 10000000 --evm-version paris "${POOL_ADDRESS}" "${POOL_CONTRACT}"`

https -f api.etherscan.io/api \
	module=contract \
	action=verifysourcecode \
	apikey="${ETHERSCAN_API_KEY}" \
	chainId="${FOUNDRY_CHAIN_ID}" \
	codeformat="solidity-standard-json-input" \
	sourceCode="${source_code}" \
	constructorArguements="${constructor_args:2}" \
	contractname="${POOL_CONTRACT}" \
	contractaddress="${POOL_ADDRESS}" \
	compilerversion="v0.8.20+commit.a1b79de6"

echo "${source_code}" > new.json





# pool_config_decoded=$(cast abi-decode "${pool_config_abi}" "${pool_config_raw}")
# echo ${pool_config_raw}

# BASE_TOKEN=$()
# VAULT_SHARES_TOKEN="0x6977eC5fae3862D3471f0f5B6Dcc64cDF5Cfd959"
# LINKER_FACTORY="0x13b0AcFA6B77C0464Ce26Ff80da7758b8e1f526E"
# LINKER_HASH="0xbce832c0ea372ef949945c6a4846b1439b728e08890b93c2aa99e2e3c50ece34"
# INITIAL_VAULT_SHARE_PRICE=1000001797945915675
# MIN_SHARE_RESERVES=10000000000000000
# MIN_TX_AMOUNT=1000000000000000
# POSITION_DURATION=2592000
# CHECKPOINT_DURATION=86400
# TIME_STRETCH=0
# GOVERNANCE="0xc187a246Ee5A4Fe4395a8f6C0f9F2AA3A5a06e9b"
# CURVE_FEE=10000000000000000
# FLAT_FEE=41095890410958
# GOV_LP_FEE=150000000000000000
# ZOMBIE_FEE=30000000000000000

# ETHERSCAN_API_KEY=XX1FS3GDYI6HM5YRTGQ8N5GQ6G9GB4FFEP
# FOUNDRY_PROFILE='production'

# BASE_TOKEN="0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
# VAULT_SHARES_TOKEN="0x6977eC5fae3862D3471f0f5B6Dcc64cDF5Cfd959"
# LINKER_FACTORY="0x13b0AcFA6B77C0464Ce26Ff80da7758b8e1f526E"
# LINKER_HASH="0xbce832c0ea372ef949945c6a4846b1439b728e08890b93c2aa99e2e3c50ece34"
# INITIAL_VAULT_SHARE_PRICE=1000001797945915675
# MIN_SHARE_RESERVES=10000000000000000
# MIN_TX_AMOUNT=1000000000000000
# POSITION_DURATION=2592000
# CHECKPOINT_DURATION=86400
# TIME_STRETCH=0
# GOVERNANCE="0xc187a246Ee5A4Fe4395a8f6C0f9F2AA3A5a06e9b"
# CURVE_FEE=10000000000000000
# FLAT_FEE=41095890410958
# GOV_LP_FEE=150000000000000000
# ZOMBIE_FEE=30000000000000000

# TARGET_0="0xc89F3B57367647d44233c79179DfEF36d6fC1118"
# TARGET_1="0x3741C190EE079dC1aFdBa939325695ad2E0FdB25"
# TARGET_2="0xbdFF34ca95aD0cC988E6cDf2E1713cCeB6589455"
# TARGET_3="0xbdFF34ca95aD0cC988E6cDf2E1713cCeB6589455"
# TARGET_4="0xA435ac01A6Bc157669aA153D020544FeC7f2aED3"

# CONSTRUCTOR_ARGS=(
# 	"constructor((address,address,address,bytes32,uint256,uint256,uint256,uint256,uint256,uint256,address,address,address,(uint256,uint256,uint256,uint256)),address,address,address,address,address)"
# 	"(${BASE_TOKEN},${VAULT_SHARES_TOKEN},${LINKER_FACTORY},${LINKER_HASH},${INITIAL_VAULT_SHARE_PRICE},${MIN_SHARE_RESERVES},${MIN_TX_AMOUNT},${POSITION_DURATION},${CHECKPOINT_DURATION},${TIME_STRETCH},${GOVERNANCE},${GOVERNANCE},${GOVERNANCE},(${CURVE_FEE},${FLAT_FEE},${GOV_LP_FEE},${ZOMBIE_FEE}))"
# 	"${TARGET_0}"
# 	"${TARGET_1}"
# 	"${TARGET_2}"
# 	"${TARGET_3}"
# 	"${TARGET_4}"
# )

# # echo "${CONSTRUCTOR_ARGS[@]}"

# # ENCODED_CONSTRUCTOR_ARGS=$(cast abi-encode "${CONSTRUCTOR_ARGS[@]}")

# # echo "${ENCODED_CONSTRUCTOR_ARGS}"
# daiii="00000000000000000000000058fa9611d2a14cbec045b92cef06b600897a4fb6000000000000000000000000c672a891525532d29b842b9753046f6d30ce613c00000000000000000000000013b0acfa6b77c0464ce26ff80da7758b8e1f526ebce832c0ea372ef949945c6a4846b1439b728e08890b93c2aa99e2e3c50ece340000000000000000000000000000000000000000000000000de0b921994700a80000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000038d7ea4c68000000000000000000000000000000000000000000000000000000000000012750000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000006340608baac62000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000000000000000000000000000002386f26fc10000000000000000000000000000000000000000000000000000000011713ec6c9a40000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000006a94d74f4300000000000000000000000000000079bebf413b157664f0efd4c2062a4b0fd1c9f7000000000000000000000000ed56a58c2b40271b3005095c38fc6580fa7a518c0000000000000000000000007ff1e156ba469580dd46d108fd5b7415bae7236f0000000000000000000000003378fc90011e9c38221328f07523466000dcd2e300000000000000000000000046736cf192a68b09801c22fad41462dbb7da3619"
# eeeee="000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006977ec5fae3862d3471f0f5b6dcc64cdf5cfd95900000000000000000000000013b0acfa6b77c0464ce26ff80da7758b8e1f526ebce832c0ea372ef949945c6a4846b1439b728e08890b93c2aa99e2e3c50ece340000000000000000000000000000000000000000000000000de0b8564551791b00000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000d473097568782000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000256061f31dce0000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000006a94d74f4300000000000000000000000000000084cec1de4e9d3cebba3cd9993bb7f00608f9da0000000000000000000000008243b11e7c5ac07654f8dfedb7d6cabe03011181000000000000000000000000025bdce0896b5dc44e8712a2f0325e00e6e86d35000000000000000000000000814536dc02d9b35884500ebc38729f29bd880f7a000000000000000000000000e4f61932493a20b3ce1156f6037a0605c550f6fd"
# REALL="000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006977ec5fae3862d3471f0f5b6dcc64cdf5cfd95900000000000000000000000013b0acfa6b77c0464ce26ff80da7758b8e1f526ebce832c0ea372ef949945c6a4846b1439b728e08890b93c2aa99e2e3c50ece340000000000000000000000000000000000000000000000000de0b8564551791b00000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000d473097568782000000000000000000000000338d5634c391ef47fb797417542aa75f4f71a4a6000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000256061f31dce0000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000006a94d74f4300000000000000000000000000000084cec1de4e9d3cebba3cd9993bb7f00608f9da0000000000000000000000008243b11e7c5ac07654f8dfedb7d6cabe03011181000000000000000000000000025bdce0896b5dc44e8712a2f0325e00e6e86d35000000000000000000000000814536dc02d9b35884500ebc38729f29bd880f7a000000000000000000000000e4f61932493a20b3ce1156f6037a0605c550f6fd"
# HELLO="000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006977ec5fae3862d3471f0f5b6dcc64cdf5cfd95900000000000000000000000013b0acfa6b77c0464ce26ff80da7758b8e1f526ebce832c0ea372ef949945c6a4846b1439b728e08890b93c2aa99e2e3c50ece340000000000000000000000000000000000000000000000000de0b8564551791b000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000278d0000000000000000000000000000000000000000000000000000000000000151800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000256061f31dce0000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000c89f3b57367647d44233c79179dfef36d6fc11180000000000000000000000003741c190ee079dc1afdba939325695ad2e0fdb25000000000000000000000000bdff34ca95ad0cc988e6cdf2e1713cceb6589455000000000000000000000000bdff34ca95ad0cc988e6cdf2e1713cceb6589455000000000000000000000000a435ac01a6bc157669aa153d020544fec7f2aed3"
# eeeee="000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000006977ec5fae3862d3471f0f5b6dcc64cdf5cfd95900000000000000000000000013b0acfa6b77c0464ce26ff80da7758b8e1f526ebce832c0ea372ef949945c6a4846b1439b728e08890b93c2aa99e2e3c50ece340000000000000000000000000000000000000000000000000de0b8564551791b00000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000d473097568782000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000256061f31dce0000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000006a94d74f4300000000000000000000000000000084cec1de4e9d3cebba3cd9993bb7f00608f9da0000000000000000000000008243b11e7c5ac07654f8dfedb7d6cabe03011181000000000000000000000000025bdce0896b5dc44e8712a2f0325e00e6e86d35000000000000000000000000814536dc02d9b35884500ebc38729f29bd880f7a000000000000000000000000e4f61932493a20b3ce1156f6037a0605c550f6fd"
# sdddd="00000000000000000000000058fa9611d2a14cbec045b92cef06b600897a4fb6000000000000000000000000c672a891525532d29b842b9753046f6d30ce613c00000000000000000000000013b0acfa6b77c0464ce26ff80da7758b8e1f526ebce832c0ea372ef949945c6a4846b1439b728e08890b93c2aa99e2e3c50ece340000000000000000000000000000000000000000000000000de0bf34771ce50d0000000000000000000000000000000000000000000000008ac7230489e8000000000000000000000000000000000000000000000000000000038d7ea4c680000000000000000000000000000000000000000000000000000000000000278d000000000000000000000000000000000000000000000000000000000000015180000000000000000000000000000000000000000000000000000d473097568782000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000c187a246ee5a4fe4395a8f6c0f9f2aa3a5a06e9b000000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000000256061f31dce0000000000000000000000000000000000000000000000000214e8348c4f0000000000000000000000000000000000000000000000000000006a94d74f4300000000000000000000000000004a75ba26defbeac2a32fb1a32b146e38a6135e430000000000000000000000000ca10647c28335756ec4ed7e16bce9efcbfd97da000000000000000000000000c25468d5fbf13d90770f1e0b4908034291ac030100000000000000000000000021a01b8cab47729fabd533a58f5b86eb9b390ee40000000000000000000000005f27c655092dd256d609c6e6750aee160cb0f82c"

forge verify-contract \
	--watch \
	--optimizer-runs 10000000 \
	--compiler-version 'v0.8.20+commit.a1b79de6' \
	--constructor-args "${constructor_args:2}" \
	--chain-id "${FOUNDRY_CHAIN_ID}" \
	"${POOL_ADDRESS}" \
	"${POOL_CONTRACT}"
